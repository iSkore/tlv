//==================================================================================================
// This is the Jenkins pipeline script for building the TLV application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    DOCKER_REGISTRY_USERNAME: The user to use logging into the docker registry
//    DOCKER_REGISTRY_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

def notifyObj
node("${BUILD_NODE}"){

    stage("Load Variables"){
        dir("tlv"){
            git branch: "${OSSIM_GIT_BRANCH}", 
            url: "${GIT_VARIABLE_SCRIPT_URL}/tlv.git",
            credentialsId: "${CREDENTIALS_ID}"
        }

        load "tlv/scripts/pipeline-variables-tlv.groovy"
    }

    stage("Checkout"){
        dir(env.appName) {
            git branch: "${env.OSSIM_GIT_BRANCH}", 
            url: "${env.GIT_PUBLIC_SERVER_URL}/${env.appName}.git",
            credentialsId: "${CREDENTIALS_ID}"
        }

        dir(env.omarCommonProjName) {
            git branch: "${env.OSSIM_GIT_BRANCH}", 
            url: "${env.GIT_PUBLIC_SEVER_URL}/${env.omarCommonProjName}.git",
            credentialsId: "${CREDENTIALS_ID}"
        }
    }

    stage("Download Artifacts") {
        step ([$class: "CopyArtifact",
               projectName: "ossim-ci-${env.OSSIM_GIT_BRANCH}",
               filter: "ossim-ci-${env.OSSIM_GIT_BRANCH}.tgz",
               flatten: true])
        sh "tar xvfz ossim-ci-${env.OSSIM_GIT_BRANCH}.tgz"
        notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish App Nexus")
      {
          withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {
              sh """
              pushd ${env.workspaceDir}/${env.appName}
              gradle :${env.appName}-app:upload
              popd
              """
            }
      }

      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                        passwordVariable: 'DOCKER_REGISTRY_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${env.workspaceDir}/${env.appName}
            gradle :${env.appName}-app:${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    try {
        stage('SonarQube Analysis') {
            withSonarQubeEnv("${env.SONARQUBE_NAME}") {
                // requires SonarQube Scanner for Gradle 2.1+
                // It's important to add --info because of SONARJNKNS-281
                sh """
                  pushd ${env.workspaceDir}/${env.appName}
                  gradle --info :${env.appName}-app:sonarqube -Dsonar.projectKey=${env.appName}
                  popd
                """
            }
        }
    }
    catch (e) {
        echo e.toString()
    }
    try {
        stage('HPFortify Analysis') {
            dir(env.appName) {
              sh """
                 export PATH=${PATH}:/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin
                 sourceanalyzer -64 -b ${env.appName} -clean
                 sourceanalyzer -64 -b ${env.appName} ${env.workspaceDir}/${env.appName}-dev/${env.appName}/apps/${env.appName}-app/grails-app/assets/javascripts/menus/*.js
                 sourceanalyzer -64 -b ${env.appName} -scan -Xmx8G -f fortifyResults-${env.appName}-app.fpr
                 ReportGenerator -format pdf -f fortifyResults-${env.appName}.pdf -source fortifyResults-${env.appName}-app.fpr
                 aws s3 cp fortifyResults-${env.appName}.pdf s3://o2-private/hpfortify/fortify-reports-pdf/
                 aws s3 cp fortifyResults-${env.appName}.fpr s3://o2-private/hpfortify/fortify-reports-fpr/
                 fortifyclient -url ${env.HPF_URL} -authtoken ${HPF_AUTH_TOKEN} uploadFPR -file fortifyResults-${env.appName}-app.fpr -applicationVersionID 2
                 """
            }
        }
   }
   catch (e) {
      echo e.toString()
   }
  stage("Clean Workspace")
   {
      if ("${CLEAN_WORKSPACE}" == "true")
        step([$class: 'WsCleanup'])
   }
}
