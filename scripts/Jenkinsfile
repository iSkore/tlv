//==================================================================================================
// This is the Jenkins pipeline script for building the TLV application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

def notifyObj
node("omar-build"){
    def workspaceDir = pwd()
    def appName = "tlv"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"
    env.O2_DEV_HOME=pwd()

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
    }
    stage("Download Artifacts") {
        step ([$class: "CopyArtifact",
               projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
               filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
               flatten: true])
        sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
        notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish App Nexus")
      {
          withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {
              sh """
              pushd ${workspaceDir}/${appName}
              gradle :${appName}-app:upload
              popd
              """
            }
      }

      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'OPENSHIFT_USERNAME',
                        passwordVariable: 'OPENSHIFT_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${workspaceDir}/${appName}
            gradle :${appName}-app:${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    try {
        stage('SonarQube Analysis') {
            withSonarQubeEnv('sonar_cloud') {
                // requires SonarQube Scanner for Gradle 2.1+
                // It's important to add --info because of SONARJNKNS-281
                sh """
                  pushd ${workspaceDir}/${appName}
                  gradle --info :${appName}-app:sonarqube -Dsonar.projectKey=${appName}
                  popd
                """
            }
        }
    }
    catch (e) {
        echo e.toString()
    }
    try {
        stage('HPFortify Analysis') {
            dir(appName) {
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -clean"
              sh "pwd"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} ./apps/tlv-app/grails-app/assets/javascripts/menus/*.js -exclude './app/tlv-app/grails-app/assets/javascripts/three.js/*' -exclude './app/tlv-app/grails-app/assets/javascripts/gif/*' -exclude './app/**/*-bundle.js'"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -scan -Xmx8G -f fortifyResults-${appName}-app.fpr"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/fortifyclient -url http://hpfortify.ossim.io:8080/ssc -authtoken 139fe681-2bf0-4184-bd30-988f1cb6ef91 uploadFPR -file fortifyResults-${appName}-app.fpr -applicationVersionID 2"
        
            }
        }
   }
   catch (e) {
      echo e.toString()
   }
  stage("Clean Workspace")
   {
      if ("${CLEAN_WORKSPACE}" == "true")
        step([$class: 'WsCleanup'])
   }
}
