//==================================================================================================
// This is the Jenkins pipeline script for building the TLV application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

def notifyObj
node("omar-build"){
    stage("Load Variables"){
        git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_VARIABLE_SCRIPT_URL}.git"

        load "tlv/scripts/pipeline-variables-tlv.groovy"
    }

    stage("Checkout"){
        dir(appName) 
            git branch: "${env.GIT_BRANCH}", url: "${env.GIT_PUBLIC_URL}/${env.APP_NAME}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${env.GIT_BRANCH}", url: "${env.GIT_PUBLIC_URL}/${env.OMAR_COMMON_PROJ_NAME}.git"
        }
    }


    stage("Download Artifacts") {
        step ([$class: "CopyArtifact",
               projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
               filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
               flatten: true])
        sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
        notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish App Nexus")
      {
          withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {
              sh """
              pushd ${env.WORKSPACE_DIR}/${env.APP_NAME}
              gradle :${env.APP_NAME}-app:upload
              popd
              """
            }
      }

      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'OPENSHIFT_USERNAME',
                        passwordVariable: 'OPENSHIFT_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${env.WORKSPACE_DIR}/${env.APP_NAME}
            gradle :${env.APP_NAME}-app:${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    try {
        stage('SonarQube Analysis') {
            withSonarQubeEnv('sonar_cloud') {
                // requires SonarQube Scanner for Gradle 2.1+
                // It's important to add --info because of SONARJNKNS-281
                sh """
                  pushd ${env.WORKSPACE_DIR}/${env.APP_NAME}
                  gradle --info :${env.APP_NAME}-app:sonarqube -Dsonar.projectKey=${env.APP_NAME}
                  popd
                """
            }
        }
    }
    catch (e) {
        echo e.toString()
    }
    try {
        stage('HPFortify Analysis') {
            dir(env.APP_NAME) {
              sh """
                 export PATH=${PATH}:/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin
                 sourceanalyzer -64 -b ${env.APP_NAME} -clean
                 sourceanalyzer -64 -b ${env.APP_NAME} ${env.WORKSPACE_DIR}/${env.APP_NAME}-dev/${env.APP_NAME}/apps/${env.APP_NAME}-app/grails-app/assets/javascripts/menus/*.js
                 sourceanalyzer -64 -b ${env.APP_NAME} -scan -Xmx8G -f fortifyResults-${env.APP_NAME}-app.fpr
                 ReportGenerator -format pdf -f fortifyResults-${env.APP_NAME}.pdf -source fortifyResults-${env.APP_NAME}-app.fpr
                 aws s3 cp fortifyResults-${env.APP_NAME}.pdf s3://o2-private/hpfortify/fortify-reports-pdf/
                 aws s3 cp fortifyResults-${env.APP_NAME}.fpr s3://o2-private/hpfortify/fortify-reports-fpr/
                 fortifyclient -url http://hpfortify.ossim.io:8080/ssc -authtoken 02c59c7f-a092-45c3-be81-9b7f9dae5728 uploadFPR -file fortifyResults-${env.APP_NAME}-app.fpr -applicationVersionID 2
                 """
            }
        }
   }
   catch (e) {
      echo e.toString()
   }
  stage("Clean Workspace")
   {
      if ("${CLEAN_WORKSPACE}" == "true")
        step([$class: 'WsCleanup'])
   }
}
